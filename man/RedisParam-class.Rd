% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RedisParam-accessors.R, R/RedisParam-class.R,
%   R/RedisParam-methods.R
\name{rpworkers}
\alias{rpworkers}
\alias{rphost}
\alias{rpport}
\alias{rppassword}
\alias{rpisworker}
\alias{RedisParam}
\alias{.send,redis_worker-method}
\alias{.recv,redis_worker-method}
\alias{.close,redis_worker-method}
\alias{.send_to,redis_manager-method}
\alias{.recv_any,redis_manager-method}
\alias{bpisup,RedisParam-method}
\alias{bpbackend,RedisParam-method}
\alias{bpbackend<-,RedisParam,RedisBackend-method}
\alias{bpstart,RedisParam-method}
\alias{bpstop,RedisParam-method}
\alias{bpstopall}
\alias{bpstopall,RedisParam-method}
\title{Enable redis-based parallel evaluation in BiocParallel}
\usage{
rpworkers(is.worker)

rphost(x)

rpport(x)

rppassword(x)

rpisworker(x)

RedisParam(
  workers = rpworkers(is.worker),
  tasks = 0L,
  jobname = ipcid(),
  log = FALSE,
  logdir = NA,
  threshold = "INFO",
  resultdir = NA_character_,
  stop.on.error = TRUE,
  timeout = 2592000L,
  exportglobals = TRUE,
  progressbar = FALSE,
  RNGseed = NULL,
  redis.hostname = rphost(),
  redis.port = rpport(),
  redis.password = rppassword(),
  is.worker = NA
)

\S4method{bpisup}{RedisParam}(x)

\S4method{bpbackend}{RedisParam}(x)

\S4method{bpbackend}{RedisParam,RedisBackend}(x) <- value

\S4method{bpstart}{RedisParam}(x, ...)

\S4method{bpstop}{RedisParam}(x)

bpstopall(x)

\S4method{bpstopall}{RedisParam}(x)
}
\arguments{
\item{is.worker}{logical(1) \code{bpstart()} creates worker-only
(\code{TRUE}), manager-only (\code{FALSE}), or manager and
worker (\code{NA}, default) connections.}

\item{x}{A `RedisParam` instance.}

\item{workers}{integer(1) number of redis workers. For `is.worker
= FALSE`, this parameter is the maximum number of workers
expected to be available. For `is.worker = NA`, this is the
number of workers opened by `bpstart()`.}

\item{tasks}{See `?"BiocParallelParam-class"`.}

\item{jobname}{character(1) name (unique) used to associate manager
& workers on a queue.}

\item{log}{See `?"BiocParallelParam-class"`.}

\item{logdir}{See `?"BiocParallelParam-class"`.}

\item{threshold}{See `?"BiocParallelParam-class"`.}

\item{resultdir}{See `?"BiocParallelParam-class"`.}

\item{stop.on.error}{See `?"BiocParallelParam-class"`.}

\item{timeout}{See `?"BiocParallelParam-class"`.}

\item{exportglobals}{See `?"BiocParallelParam-class"`.}

\item{progressbar}{See `?"BiocParallelParam-class"`.}

\item{RNGseed}{See `?"BiocParallelParam-class"`.}

\item{redis.hostname}{character(1) host name of redis server,
from system environment variable `REDIS_HOST` or, by default,
`"127.0.0.1"`.}

\item{redis.port}{integer(1) port of redis server, from system
environment variable `REDIS_PORT` or, by default, 6379.}

\item{redis.password}{character(1) or NULL, host password of redis server
or, by default, `NA_character_` (no password).}

\item{\dots}{ignored.}
}
\description{
Enable redis-based parallel evaluation in BiocParallel
}
\details{
`rpworkers()` determines the number of workers using
    `snowWorkers()` if workers are created dynamically, or a fixed
    maximum (currently 1000) if workers are listening on a queue.

    `rphost()` reads the host name of the redis server from a
    system environment variable `"REDIS_HOST"`, defaulting to
    `"127.0.0.1"`. `rphost(x)` gives the host name used by `x`.

    `rpport()` reads the port of the redis server from a system
    environment variable `"REDIS_PORT"`, defaulting to 6379.
    `rpport(x)` gives the port used by `x`.

    `rppassword()` reads an (optional) password from the system
    environment variable "REDIS_PASSWORD", defaulting to
    `NA_character_` (no password). `rppassword(x)` gives the password
     used by `x`.

Use an instance of `RedisParam()` for interactive parallel
    evaluation using `bplapply()` or `bpiterate()`. `RedisParam()`
    requires access to a redis server, running on
    `manager.hostname` (e.g., 127.0.0.1) at `manager.port` (e.g.,
    6379). The manager and workers communicate via the redis
    server, rather than the socket connections used by other
    BiocParallel back-ends.

    When invoked with `is.worker = NA` (the default) `bpstart()`,
    `bplapply()` and `bpiterate()` start and stop redis workers on
    the local computer. It may be convenient to use `bpstart()`
    and `bpstop()` independently, to amortize the cost of worker
    start-up across multiple calls to `bplapply()` / `bpiterate()`.

    Alternatively, a manager and one or more workers can each be
    started in different processes across a network. The manager is
    started, e.g., in an interactive session, by specifying
    `is.worker = FALSE`. Workers are started, typically as
    background processes, with `is.worker = TRUE`. Both manager and
    workers must specify the same value for `jobname =`, the redis
    key used for communication. In this scenario, workers can be
    added at any time, including during e.g., `bplapply()`
    evaluation on the manager. See the vignette for possible
    scenarios.

`bpstopall()` is used from the manager to stop redis
    workers launched independently, with `is.worker = TRUE`.
}
\examples{
res <- bplapply(1:20, function(i) Sys.getpid(), BPPARAM = RedisParam())
table(unlist(res))

\dontrun{
## start workers in background proocess(es)
rscript <- R.home("bin/Rscript")
worker_script <- tempfile()
writeLines(c(
    'worker <- RedisParam::RedisParam(jobname = "demo", is.worker = TRUE)',
    'RedisParam::bpstart(worker)'
), worker_script)

for (i in seq_len(2))
    system2(rscript, worker_script, wait = FALSE)

## start manager
p <- RedisParam(jobname = "demo", is.worker = FALSE)
result <- bplapply(1:5, function(i) Sys.getpid(), BPPARAM = p)
table(unlist(result))

## stop all workers
bpstopall(p)
}

}
